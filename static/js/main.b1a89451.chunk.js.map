{"version":3,"sources":["components/Header.js","firebase/config.js","hooks/useStorage.js","components/ProgressBar.js","components/UploadForm.js","hooks/useFirestore.js","components/Image.js","components/ImageGrid.js","components/Modal.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","height","xmlns","fillRule","clipRule","d","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","Image","imageUrl","imageStatus","setImageStatus","img","src","onLoad","onError","alt","opacity","viewBox","ImageGrid","setSelectedImage","map","key","onClick","whileHover","layout","Modal","selectedImage","classList","contains","style","maxWidth","maxHeight","y","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b1a89451.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n    <div className=\"flex flex-col mt-6 items-center space-y-4 text-gray-800 text-center\">\n      <h1 className=\"text-4xl font-light tracking-wider font-sans\">The Gallery</h1>\n      <h1 className=\"text-xl font-thin\">Image gallery, using React and Firebase</h1>\n    </div>\n  )\n}\n\nexport default Header\n","import * as firebase from 'firebase/app'\nimport 'firebase/storage'\nimport 'firebase/firestore'\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDF0EFBNuiAYc2_e53342j43xaoZEPFlPU\",\n  authDomain: \"instagram-clone-538cb.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-538cb.firebaseio.com\",\n  projectId: \"instagram-clone-538cb\",\n  storageBucket: \"instagram-clone-538cb.appspot.com\",\n  messagingSenderId: \"999207305754\",\n  appId: \"1:999207305754:web:b03ca766338fe85d8f07a3\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage()\nconst projectFirestore = firebase.firestore()\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp\n\nexport { projectStorage, projectFirestore, timestamp }","import { useState, useEffect } from 'react'\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config'\n\nconst useStorage = (file) => {\n  const [progress, setProgress] = useState(0)\n  const [error, setError] = useState(null)\n  const [url, setUrl] = useState(null)\n\n  useEffect(() => {\n    const storageRef = projectStorage.ref(file.name)\n    const collectionRef = projectFirestore.collection('images')\n\n    storageRef.put(file).on('state_changed', (snap) => {\n      let percentage = (snap.bytesTransferred / snap.totalBytes) * 100\n      setProgress(percentage)\n    }, (error) => {\n      setError(error)\n    }, async () => {\n      const url = await storageRef.getDownloadURL()\n      const createdAt = timestamp()\n      collectionRef.add({ url, createdAt })\n      setUrl(url)\n    })\n  }, [file])\n\n  return { progress, url, error }\n}\n\nexport default useStorage","import React, { useEffect } from 'react'\nimport useStorage from '../hooks/useStorage'\nimport { motion } from 'framer-motion'\n\nconst ProgressBar = ({ file, setFile }) => {\n  const { progress, url } = useStorage(file)\n\n  useEffect(() => {\n    if (url) {\n      setFile(null)\n    }\n  }, [url, setFile])\n\n  return (\n    <motion.div\n      className=\"bg-green-700 h-1 inline-block\"\n      initial={{ width: 0 }}\n      animate={{ width: progress + '%' }}\n    >\n    </motion.div>\n  )\n}\n\nexport default ProgressBar","import React, { useState } from 'react'\nimport ProgressBar from './ProgressBar'\n\nconst UploadForm = () => {\n  const [file, setFile] = useState(null)\n  const [error, setError] = useState(null)\n\n  const handleFileChange = (e) => {\n    let selected = e.target.files[0]\n\n    const types = ['image/png', 'image/jpeg']\n\n    if (selected && types.includes(selected.type)) {\n      setFile(selected)\n      setError('')\n    } else {\n      setFile(null)\n      setError('Only images of type png or jpeg are allowed.')\n    }\n  }\n\n  return (\n    <div className=\"mt-10\">\n      <div className=\"flex flex-col items-center space-y-2\">\n        <div>\n          <label className=\"cursor-pointer\">\n            <div className=\"flex items-center justify-center rounded-full border border-black p-2 transform transition-transform duration-150 hover:rotate-90\">\n              <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fillRule=\"evenodd\" clipRule=\"evenodd\"><path d=\"M11 11v-11h1v11h11v1h-11v11h-1v-11h-11v-1h11z\" /></svg>\n            </div>\n            <input type=\"file\" className=\"hidden\" onChange={handleFileChange} />\n          </label>\n        </div>\n        <div>\n          {error && <div className=\"text-red-700\">{error}</div>}\n          {file && <div className=\"text-gray-800\">{file.name}</div>}\n        </div>\n      </div>\n\n      {file && <ProgressBar file={file} setFile={setFile} />}\n    </div>\n  )\n}\n\nexport default UploadForm\n","import { useState, useEffect } from 'react'\nimport { projectFirestore } from '../firebase/config'\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([])\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot((snap) => {\n        let documents = []\n        snap.forEach(doc => {\n          documents.push({ ...doc.data(), id: doc.id })\n        })\n        setDocs(documents)\n      })\n\n    return () => unsub()\n  }, [collection])\n\n  return { docs }\n}\n\nexport default useFirestore","import React, { useState } from \"react\";\nimport { motion } from 'framer-motion'\n\nconst Image = ({ imageUrl }) => {\n  const [imageStatus, setImageStatus] = useState('loading')\n\n  const handleImageLoaded = () => {\n    setImageStatus('loaded')\n  }\n\n  const handleImageErrored = () => {\n    setImageStatus('error')\n  }\n\n  return (\n    <div className=\"absolute h-full w-full\">\n      <motion.img\n        src={imageUrl}\n        onLoad={handleImageLoaded}\n        onError={handleImageErrored}\n        alt=\"uploaded\"\n        className=\"h-full w-full object-cover object-center\"\n        initial={{ opacity: 0 }}\n        animate={imageStatus === 'loaded' && { opacity: 1 }}\n      />\n      {\n        imageStatus === 'loading' &&\n        <div className=\"absolute top-0 left-0 h-full w-full flex justify-center items-center bg-gray-600 opacity-25\">\n          {\n            imageStatus === 'loading' &&\n            <div className=\"animate-spin\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M13.75 22c0 .966-.783 1.75-1.75 1.75s-1.75-.784-1.75-1.75.783-1.75 1.75-1.75 1.75.784 1.75 1.75zm-1.75-22c-1.104 0-2 .896-2 2s.896 2 2 2 2-.896 2-2-.896-2-2-2zm10 10.75c.689 0 1.249.561 1.249 1.25 0 .69-.56 1.25-1.249 1.25-.69 0-1.249-.559-1.249-1.25 0-.689.559-1.25 1.249-1.25zm-22 1.25c0 1.105.896 2 2 2s2-.895 2-2c0-1.104-.896-2-2-2s-2 .896-2 2zm19-8c.551 0 1 .449 1 1 0 .553-.449 1.002-1 1-.551 0-1-.447-1-.998 0-.553.449-1.002 1-1.002zm0 13.5c.828 0 1.5.672 1.5 1.5s-.672 1.501-1.502 1.5c-.826 0-1.498-.671-1.498-1.499 0-.829.672-1.501 1.5-1.501zm-14-14.5c1.104 0 2 .896 2 2s-.896 2-2.001 2c-1.103 0-1.999-.895-1.999-2s.896-2 2-2zm0 14c1.104 0 2 .896 2 2s-.896 2-2.001 2c-1.103 0-1.999-.895-1.999-2s.896-2 2-2z\" /></svg>\n            </div>\n          }\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default Image;","import React from 'react'\nimport useFirestore from '../hooks/useFirestore'\nimport { motion } from 'framer-motion'\nimport Image from './Image'\n\nconst ImageGrid = ({ setSelectedImage }) => {\n  const { docs } = useFirestore('images')\n\n  return (\n    <div className=\"px-2 max-w-screen-lg my-12 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-10 mx-auto\">\n      {\n        docs && docs.map(doc => (\n          <motion.div key={doc.id}\n            className=\"relative pb-1/1 cursor-pointer\"\n            onClick={() => setSelectedImage(doc.url)}\n            initial={{ opacity: 0.8 }}\n            whileHover={{ opacity: 1 }}\n            layout\n          >\n            <Image imageUrl={doc.url} />\n          </motion.div>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default ImageGrid\n","import React from 'react'\nimport { motion } from 'framer-motion'\n\nconst Modal = ({ selectedImage, setSelectedImage }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImage(null)\n    }\n  }\n\n  return (\n    <motion.div \n      className=\"backdrop fixed top-0 left-0 h-full w-full bg-black bg-opacity-50 flex items-center justify-center\" \n      onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img \n        src={selectedImage} \n        alt=\"enlarged pic\"\n        className=\"bg-white border-2 border-white shadow-lg\"\n        style={{ maxWidth: 60 + '%', maxHeight: 85 + '%' }} \n        initial={{ y: '-100vh' }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal\n","import React, { useState } from 'react';\nimport Header from './Header';\nimport UploadForm from './UploadForm';\nimport ImageGrid from './ImageGrid';\nimport Modal from './Modal';\n\nfunction App() {\n  const [selectedImage, setSelectedImage] = useState(null)\n\n  return (\n    <div>\n      <Header />\n      <UploadForm />\n      <ImageGrid setSelectedImage={setSelectedImage} />\n      {selectedImage && <Modal selectedImage={selectedImage} setSelectedImage={setSelectedImage} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport './styles/tailwind.output.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}